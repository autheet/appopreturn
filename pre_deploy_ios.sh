#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.
set -x # Enable debug output

# --- Configuration ---
MAIN_BRANCH_NAME="main" # Or "master", or your primary branch name
# Get this from your Firebase Project Settings > Your apps > iOS app
FIREBASE_IOS_APP_ID="1:1706363000:ios:3a3ea7e54b6fc40ee1858d" # From your firebase_options.dart via project.pbxproj
# --- Store Current Branch and Ensure Clean Working Directory ---
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "Currently on branch: $CURRENT_BRANCH"

# --- Fetch latest changes from remote for all branches and tags ---
echo "Fetching latest from remote..."
git fetch --all --tags

# --- Determine Build Name and Build Number ---
echo "Determining build name and number..."
BUILD_NAME=$(git describe --tags --abbrev=0 origin/$MAIN_BRANCH_NAME 2>/dev/null)
if [ -z "$BUILD_NAME" ]; then
  echo "No Git tags found on 'origin/$MAIN_BRANCH_NAME'. Using default build name '1.0.0'."
  BUILD_NAME="1.0.0"
else
  BUILD_NAME=${BUILD_NAME#v}
  echo "Using build name from Git tag on 'origin/$MAIN_BRANCH_NAME': $BUILD_NAME"
fi

BUILD_NUMBER=$(git rev-list --count origin/$MAIN_BRANCH_NAME)
if [ -z "$BUILD_NUMBER" ]; then
  echo "Could not determine commit count for 'origin/$MAIN_BRANCH_NAME'. Using default build number '1'."
  BUILD_NUMBER="1"
else
  echo "Using build number from commit count on 'origin/$MAIN_BRANCH_NAME': $BUILD_NUMBER"
fi
# --- End of Determining Build Name and Build Number ---


# --- Build Flutter iOS App (IPA) ---
echo "Building Flutter iOS app (IPA) with dynamic build name and number..."
echo "iOS Build Name: $BUILD_NAME"
echo "iOS Build Number: $BUILD_NUMBER"

# Define path for iOS Dart debug symbols relative to project root
# Flutter will place them in a structured way within this directory.
DEBUG_SYMBOL_PATH_IOS="build/ios_app_symbols"
mkdir -p "$DEBUG_SYMBOL_PATH_IOS"

# Ensure you have set up iOS code signing in your Xcode project
# This command typically requires a macOS environment with Xcode installed and configured.
flutter build ipa --release \
  --build-name="$BUILD_NAME" \
  --build-number="$BUILD_NUMBER" \
  --obfuscate \
  --split-debug-info="$DEBUG_SYMBOL_PATH_IOS" \
  # --export-options-plist=path/to/ExportOptions.plist # Optional: if you need specific export options

echo "Flutter iOS IPA build attempt finished."
echo "IPA typically located at: build/ios/ipa/*.ipa"
echo "Dart debug symbols for iOS are in $DEBUG_SYMBOL_PATH_IOS"
echo "Native iOS dSYM files are usually found within the Xcode archive (e.g., ~/Library/Developer/Xcode/Archives)"
# --- End of Flutter iOS App Build ---


# --- Upload iOS Debug Symbols to Firebase Crashlytics (dSYMs + Dart Symbols) ---
# IMPORTANT: For dSYMs, it's highly recommended to use the Xcode Run Script Phase
# provided by Firebase Crashlytics for automatic uploads during the archive process.
# This script section is for Dart symbols from --split-debug-info and as a fallback for dSYMs
# if the Xcode Run Script method isn't used or fails.
## the following is not yet supported by firebase-cli for ios

echo "Attempting to upload iOS symbols to Firebase Crashlytics..."

# Upload Dart symbols generated by --split-debug-info
if [ -d "$DEBUG_SYMBOL_PATH_IOS" ] && [ "$(ls -A $DEBUG_SYMBOL_PATH_IOS)" ]; then
  echo "Uploading Dart symbols from $DEBUG_SYMBOL_PATH_IOS..."
  firebase crashlytics:symbols:upload --app="$FIREBASE_IOS_APP_ID" "$DEBUG_SYMBOL_PATH_IOS"
  echo "Dart symbols upload attempt finished."
else
  echo "Warning: Dart symbols directory '$DEBUG_SYMBOL_PATH_IOS' is empty or does not exist. Skipping upload."
fi

# Optional: Manual dSYM upload (less common if Xcode Run Script is set up)
# You would need to locate your .dSYM file(s) after the build.
# The `flutter build ipa` command creates an archive. You can find dSYMs inside it,
# or sometimes in `build/ios/Release-iphoneos/`.
# Example:
# DSYM_PATH="path/to/your/app.dSYM" # You'd need to find this path
# if [ -d "$DSYM_PATH" ]; then
#   echo "Uploading dSYM from $DSYM_PATH..."
#   firebase crashlytics:symbols:upload --app="$FIREBASE_IOS_APP_ID" "$DSYM_PATH"
#   echo "dSYM upload attempt finished."
# else
#   echo "Warning: dSYM path '$DSYM_PATH' not found. Ensure your build generated dSYMs and the path is correct."
#   echo "It's recommended to use the Firebase Crashlytics Run Script in Xcode for automatic dSYM uploads."
# fi
# --- End of Uploading Debug Symbols ---

echo "Pre-deploy script for iOS finished."
